import random


# ### Algorithm for man in the middle attack
#
# * Publicly Available values of p and g; also values send back and forth
# * Alice sends R1 using g^x % p. x is randomly generated by Alice
# * MIM intercepts R1, and generates z; sends R2 = g^z % p; to both Alice and Bob.
# * Bob generates y and sends R3 as g^y % p to MIM
# * Testing as Key Generated; by <p style="color: red">sender = R2^x % p == mim_sender = R1^z % p;</p> <p style="color: green">receiver = R2^y % p ==  mim_receiver = R3^z % p


# value of p and g know to both users
p = random.randint(1, 1000)
g = p
while p == g:
    g = random.randint(1, p-1)
value_send_sender = 0
value_send_receiver = 0
value_sender_mim = 0
value_receiver_mim = 0

print('\n\nValues of p generated : ', p)
print('Values of g generated : ', g)


class sender:
    x = random.randint(1, p-1)  # 3
    sender_key = 0

    def comp_mod(self):
        global p
        global g
        global value_send_sender
        global value_send_receiver
        global value_sender_mim
        global value_receiver_mim
        if value_send_sender == 0:
            value_send_sender = (g**self.x) % p
            print('\nAlice : Value of R1 sent by Alice intercepted by MIM - Eve :',
                  value_send_sender)
        else:
            self.sender_key = (value_receiver_mim**self.x) % p
            print('\nAlice : Value of R2 received by Alice sent by Bob(MIM - Eve) :',
                  value_receiver_mim)
        return


class receiver:
    y = random.randint(1, p-1)  # 2
    receiver_key = 0

    def comp_mod(self):
        global p
        global g
        global value_send_sender
        global value_send_receiver
        global value_sender_mim
        global value_receiver_mim
        if value_send_receiver == 0:
            value_send_receiver = (g**self.y) % p
            print('\nBob : Value of R3 sent by Bob to Alice intercepted by MIM - Eve :',
                  value_send_receiver)
        else:
            self.receiver_key = (value_sender_mim**self.y) % p
            print('\nBob : Value of R2 received by Bob sent by Alice(MIM - Eve) :',
                  value_sender_mim)
        return


class man_in_the_middle:
    z = random.randint(1, p-1)  # 5
    mim_receiver_key = 0
    mim_sender_key = 0
    min_key = 0

    def comp_mod(self):
        global p
        global g
        global value_send_sender
        global value_send_receiver
        global value_sender_mim
        global value_receiver_mim
        if value_send_receiver == 0:
            value_receiver_mim = (g**self.z) % p
            value_sender_mim = (g**self.z) % p
            print('\nEve : Value of R2 generated by MIM - Eve and sent to Alice and Bob :',
                  value_sender_mim)
        else:
            self.mim_sender_key = (value_send_sender**self.z) % p
            print(
                '\nEve : Value of R1 sent by Alice intercepted by MIM - Eve : ', value_send_sender)
            self.mim_receiver_key = (value_send_receiver**self.z) % p
            print('\nEve : Value of R3 sent by Bob intercepted by MIM - Eve : ',
                  value_send_receiver)
        return


value_send_sender = 0
value_send_receiver = 0

send_mim = sender()
receive_mim = receiver()
mim = man_in_the_middle()

send_mim.comp_mod()
mim.comp_mod()
receive_mim.comp_mod()
send_mim.comp_mod()
mim.comp_mod()
receive_mim.comp_mod()

if (send_mim.sender_key == mim.mim_sender_key) & (receive_mim.receiver_key == mim.mim_receiver_key):
    print('\n\nMan in the middle attack sucessful')

print('\nKey generated K1 by Alice : ', send_mim.sender_key)
print('Key generated K2 by Bob : ', receive_mim.receiver_key)
print('Key generated K1 by Eve : ', mim.mim_sender_key)
print('Key generated K2 by Eve : ', mim.mim_receiver_key)
